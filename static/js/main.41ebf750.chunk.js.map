{"version":3,"sources":["components/Cards/Cards.module.css","components/Cards/Cards.jsx","Context/Reducers.js","Context/Types.js","Context/MainContext.js","components/Chart/Chart.jsx","components/Country/CountryPicker.jsx","App.js","index.js","components/Chart/Chart.module.css","App.module.css","img/image.png"],"names":["module","exports","getDate","date","Date","toDateString","Cards","data","deaths","recovered","confirmed","lastUpdate","className","styles","container","Grid","spacing","justify","item","component","Card","cx","card","infected","xs","sm","CardContent","Typography","color","gutterBottom","variant","start","end","duration","separator","CircularProgress","state","type","payload","deathCount","recoveredCount","confirmCount","dailyData","countries","countryData","baseUrl","initialState","MainContext","createContext","MainContextProvider","children","useReducer","Reducer","dispatch","a","axios","get","res","value","console","log","message","map","country","name","Provider","fetchAll","getAllCountries","fetchDailyData","fetchData","getCountryData","Chart","useContext","LineChart","length","labels","reportDate","datasets","totalConfirmed","label","borderColor","backgroundColor","fill","total","BarChart","Object","values","options","legend","display","title","text","CountryPicker","handleCountryChange","FormControl","style","marginTop","marginBottom","NativeSelect","defaultValue","onChange","e","target","index","key","MainComponent","useState","setCountry","useEffect","src","coronaImage","alt","width","maxWidth","textAlign","val","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.41ebf750.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Cards_container__1sujs\",\"card\":\"Cards_card__1quKH\",\"infected\":\"Cards_infected__32uKE\",\"recovered\":\"Cards_recovered__9glQd\",\"deaths\":\"Cards_deaths__2QbWY\"};","import React from 'react'\r\nimport Card from '@material-ui/core/Card';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport styles from './Cards.module.css'\r\nimport { Grid } from '@material-ui/core';\r\nimport CountUp from 'react-countup'\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport cx from 'classnames'\r\n\r\nconst getDate = (date) => (\r\n    new Date(date).toDateString()\r\n)\r\n\r\nconst Cards = ({ data: { deaths, recovered, confirmed, lastUpdate } }) => {\r\n\r\n    if (!deaths || !recovered || !confirmed || !lastUpdate) {\r\n        return (\r\n            <div className={styles.container}>\r\n                <CircularProgress color=\"secondary\" />\r\n            </div>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <div className={styles.container}>\r\n            <Grid container spacing={3} justify=\"center\">\r\n                <Grid item component={Card}\r\n                    className={cx(styles.card, styles.infected)}\r\n                    xs={12} sm={3}>\r\n                    <CardContent>\r\n                        <Typography color=\"textSecondary\"\r\n                            gutterBottom>Infected</Typography>\r\n                        <Typography variant=\"h5\">\r\n                            <CountUp\r\n                                start={0}\r\n                                end={confirmed}\r\n                                duration={1.5}\r\n                                separator=\",\"\r\n                            />\r\n                        </Typography>\r\n                        <Typography color='textSecondary'>\r\n                            {getDate(lastUpdate)}\r\n                        </Typography>\r\n                        <Typography variant=\"body2\">\r\n                            Number of active cases of COVID-19\r\n                        </Typography>\r\n                    </CardContent>\r\n                </Grid>\r\n                <Grid item component={Card}\r\n                    className={cx(styles.card, styles.recovered)}\r\n                    xs={12} sm={3}>\r\n                    <CardContent>\r\n                        <Typography color=\"textSecondary\"\r\n                            gutterBottom>Recovered</Typography>\r\n                        <Typography variant=\"h5\">\r\n                            <CountUp\r\n                                start={0}\r\n                                end={recovered}\r\n                                duration={1.5}\r\n                                separator=\",\"\r\n                            />\r\n                        </Typography>\r\n                        <Typography color='textSecondary'>\r\n                            {getDate(lastUpdate)}\r\n                        </Typography>\r\n                        <Typography variant=\"body2\">\r\n                            Number of recoveries of COVID-19\r\n                        </Typography>\r\n                    </CardContent>\r\n                </Grid>\r\n                <Grid item component={Card}\r\n                    className={cx(styles.card, styles.deaths)}\r\n                    xs={12} sm={3}>\r\n                    <CardContent>\r\n                        <Typography color=\"textSecondary\"\r\n                            gutterBottom>Deaths</Typography>\r\n                        <Typography variant=\"h5\"> <CountUp\r\n                            start={0}\r\n                            end={deaths}\r\n                            duration={1.5}\r\n                            separator=\",\"\r\n                        /> </Typography>\r\n                        <Typography color='textSecondary'>\r\n                            {getDate(lastUpdate)}\r\n                        </Typography>\r\n                        <Typography variant=\"body2\">\r\n                            Number of deaths caused by COVID-19\r\n                        </Typography>\r\n                    </CardContent>\r\n                </Grid>\r\n            </Grid>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Cards\r\n","import { FETCH_ALL, GET_DAILY_DATA, GET_ALL_COUNTRIES, GET_COUNTRY_DETAILS } from \"./Types\";\r\n\r\nexport default (state, { type, payload }) => {\r\n    switch (type) {\r\n        case FETCH_ALL:\r\n            return {\r\n                ...state,\r\n                deaths: payload.deathCount,\r\n                recovered: payload.recoveredCount,\r\n                confirmed: payload.confirmCount,\r\n                lastUpdate: payload.lastUpdate\r\n            }\r\n        case GET_DAILY_DATA:\r\n            return {\r\n                ...state,\r\n                dailyData: payload\r\n            }\r\n        case GET_ALL_COUNTRIES:\r\n            return {\r\n                ...state,\r\n                countries: payload\r\n            }\r\n        case GET_COUNTRY_DETAILS:\r\n            return {\r\n                ...state,\r\n                countryData: payload\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n","export const FETCH_ALL = 'FETCH_ALL';\r\nexport const GET_DAILY_DATA = 'GET_DAILY_DATA';\r\nexport const GET_ALL_COUNTRIES = \"GET_ALL_COUNTRIES\";\r\nexport const GET_COUNTRY_DETAILS = \"GET_COUNTRY_DETAILS\";","import React, { createContext, useReducer } from 'react'\r\nimport Reducer from './Reducers'\r\nimport axios from 'axios'\r\nimport { FETCH_ALL, GET_DAILY_DATA, GET_ALL_COUNTRIES, GET_COUNTRY_DETAILS } from './Types';\r\n\r\nconst baseUrl = 'https://covid19.mathdro.id/api'\r\n\r\nconst initialState = {\r\n    deaths: 0,\r\n    recovered: 0,\r\n    confirmed: 0,\r\n    countryData: {},\r\n    lastUpdate: '',\r\n    dailyData: [],\r\n    countries: [],\r\n};\r\n\r\nexport const MainContext = createContext(initialState);\r\n\r\nexport const MainContextProvider = ({ children }) => {\r\n    const [state, dispatch] = useReducer(Reducer, initialState);\r\n\r\n    async function fetchData() {\r\n        try {\r\n            let res = await axios.get(baseUrl);\r\n            const { deaths, recovered, confirmed, lastUpdate } = res.data;\r\n\r\n            let payload = {\r\n                deathCount: deaths.value,\r\n                recoveredCount: recovered.value,\r\n                confirmCount: confirmed.value,\r\n                lastUpdate\r\n            }\r\n            dispatch({\r\n                type: FETCH_ALL,\r\n                payload\r\n            })\r\n        } catch (error) {\r\n            console.log(error.message);\r\n        }\r\n    }\r\n    async function fetchDailyData() {\r\n        try {\r\n            let res = await axios.get(`${baseUrl}/daily`);\r\n            res = res.data\r\n            dispatch({\r\n                type: GET_DAILY_DATA,\r\n                payload: res\r\n            })\r\n        } catch (error) {\r\n            console.log(error.message);\r\n        }\r\n    }\r\n    async function getAllCountries() {\r\n        try {\r\n            let res = await axios.get(`${baseUrl}/countries`);\r\n            res = res.data;\r\n            let payload = res.countries.map((country) => country.name);\r\n            dispatch({\r\n                type: GET_ALL_COUNTRIES,\r\n                payload\r\n            })\r\n        } catch (error) {\r\n            console.log(error.message);\r\n        }\r\n    }\r\n    function fetchAll() {\r\n        getAllCountries();\r\n        fetchDailyData();\r\n        fetchData();\r\n    }\r\n    async function getCountryData(name) {\r\n        try {\r\n            let res = await axios.get(`${baseUrl}/countries/${name}`);\r\n            res = res.data;\r\n            let payload = {\r\n                confirmed: res.confirmed.value,\r\n                recovered: res.recovered.value,\r\n                deaths: res.deaths.value,\r\n            }\r\n            dispatch({\r\n                type: GET_COUNTRY_DETAILS,\r\n                payload\r\n            })\r\n        } catch (error) {\r\n            console.log(error.message);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <MainContext.Provider value={{\r\n            ...state,\r\n            fetchAll,\r\n            getCountryData\r\n        }}>\r\n            {children}\r\n        </MainContext.Provider>\r\n    )\r\n}","import React, { useContext, useEffect } from 'react'\r\nimport { Line, Bar } from 'react-chartjs-2';\r\nimport styles from './Chart.module.css';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport { MainContext } from '../../Context/MainContext'\r\n\r\nconst Chart = ({ dailyData, country }) => {\r\n    const { countryData } = useContext(MainContext);\r\n    const { recovered, confirmed, deaths } = countryData;\r\n    const LineChart = () => (\r\n        dailyData.length > 1 ? <Line\r\n            data={{\r\n                labels: dailyData.map(({ reportDate }) => reportDate),\r\n                datasets: [{\r\n                    data: dailyData.map(({ totalConfirmed }) => totalConfirmed),\r\n                    label: \"Infected\",\r\n                    borderColor: \"#3333ff\",\r\n                    backgroundColor: \"rgba(0,0,255,.7)\",\r\n                    fill: true\r\n                }, {\r\n                    data: dailyData.map(({ deaths }) => deaths.total),\r\n                    label: \"Deaths\",\r\n                    backgroundColor: 'rgba(255,0,0,.7)',\r\n                    borderColor: 'red',\r\n                    fill: true\r\n                }]\r\n            }}\r\n        /> : <CircularProgress />\r\n    )\r\n    const BarChart = () => (\r\n        Object.values(countryData).length > 0 ? (\r\n            <Bar\r\n                data={{\r\n                    labels: ['Infected', 'Recovered', 'Deaths'],\r\n                    datasets: [{\r\n                        label: 'People',\r\n                        backgroundColor: [\r\n                            'rgb(0, 0, 255,0.5)',\r\n                            'rgb(0, 255, 0,0.5)',\r\n                            'rgb(255, 0, 0,0.7)',\r\n                        ],\r\n                        data: [confirmed, recovered, deaths]\r\n                    }]\r\n                }}\r\n                options={{\r\n                    legend: { display: false },\r\n                    title: { display: true, text: `Current State in ${country}.` }\r\n                }} />\r\n        ) : <CircularProgress />\r\n    )\r\n\r\n    return (\r\n        <div className={styles.container}>\r\n            {country == 'global' ? <LineChart /> : <BarChart />}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Chart\r\n","import React from 'react'\r\nimport NativeSelect from '@material-ui/core/NativeSelect'\r\nimport FormControl from '@material-ui/core/FormControl'\r\nconst CountryPicker = ({ countries, handleCountryChange }) => {\r\n    return (\r\n        <FormControl style={{ marginTop: 20, marginBottom: 20 }}>\r\n            <NativeSelect\r\n                defaultValue=\"global\"\r\n                onChange={e => handleCountryChange(e.target.value)} >\r\n                <option value=\"global\">Global</option>\r\n                {countries.map((country, index) => (\r\n                    <option key={index} value={country}>{country}</option>\r\n                ))}\r\n            </NativeSelect>\r\n        </FormControl>\r\n    )\r\n}\r\n\r\nexport default CountryPicker\r\n","import React, { useContext, useEffect, useState } from 'react'\n\nimport { Cards, Chart, CountryPicker } from './components'\nimport styles from './App.module.css'\nimport { MainContextProvider, MainContext } from './Context/MainContext'\n\nimport coronaImage from './img/image.png'\n\nconst MainComponent = () => {\n  const [country, setCountry] = useState('global');\n  const { deaths, recovered, confirmed, lastUpdate, dailyData, countries, fetchAll, getCountryData } = useContext(MainContext);\n  let data = {\n    deaths, recovered, confirmed, lastUpdate\n  }\n  const handleCountryChange = (val) => {\n    setCountry(val);\n    getCountryData(val);\n  }\n  //fetches all the data\n  useEffect(() => {\n    fetchAll()\n  }, [])\n\n\n\n  return (\n    <div className={styles.container}>\n      <img src={coronaImage} alt=\"COVID-19\" style={{ width: '60%', maxWidth: 200 }} />\n      <h5 style={{ textAlign: 'center', color: \"grey\", marginBottom: 5 }}>All the data is taken from https://covid19.mathdro.id/api.</h5>\n      <Cards data={data} />\n      <CountryPicker countries={countries} country={country}\n        handleCountryChange={handleCountryChange} />\n      <Chart dailyData={dailyData} country={country} />\n    </div>\n  )\n}\n\nconst App = () => {\n  return (\n    <MainContextProvider>\n      <MainComponent />\n    </MainContextProvider>\n  )\n}\n\nexport default App\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Chart_container__1IgGJ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__2hJXP\"};","module.exports = __webpack_public_path__ + \"static/media/image.d7265326.png\";"],"sourceRoot":""}